// Package similapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package similapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for NodeType.
const (
	Document NodeType = "document"
	Folder   NodeType = "folder"
)

// CreateRecordsRequest The object is used for records creation.
type CreateRecordsRequest struct {
	// Document The binary data for the document of the specified format.
	Document []byte `json:"document"`

	// NodeType The object describes the index node type.
	NodeType NodeType `json:"nodeType"`

	// Parser The parser name (format name) to be used for the document body.
	Parser string `json:"parser"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the records within a search result set, the value is overridden by the rankMultiplier value specified for an individual record.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Records The list of records that must be added to the node.
	Records []Record `json:"records"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`
}

// CreateRecordsResult The object is used as a response of the records creation request.
type CreateRecordsResult struct {
	// NodesCreated The list of nodes created.
	NodesCreated []Node `json:"nodesCreated"`

	// RecordsCreated The number of records created.
	RecordsCreated int `json:"recordsCreated"`
}

// Format The object describes a data format.
type Format struct {
	// Name The format name, it is used as the format identifier.
	Name string `json:"name"`
}

// Formats The object is used as a response of the formats list request.
type Formats struct {
	// Formats Contains a list of formats.
	Formats []Format `json:"formats"`
}

// ListNodesResult The object is used as a response of the nodes list request.
type ListNodesResult struct {
	// Items The list of nodes.
	Items []Node `json:"items"`
}

// ListRecordsResult The object is used a response to the list records request.
type ListRecordsResult struct {
	// NextPageId The id of the next page for getting the rest of the records.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Records The list of found records.
	Records *[]Record `json:"records,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Node The object describes the index node.
type Node struct {
	// FullPath The node full path (identifier) within the index.
	FullPath string `json:"fullPath"`

	// Name The node name, must be unique among the siblings in the tree.
	Name string `json:"name"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`

	// Type The object describes the index node type.
	Type NodeType `json:"type"`
}

// NodeType The object describes the index node type.
type NodeType string

// PatchRecordsRequest The object is used to upsert and delete the node records.
type PatchRecordsRequest struct {
	// DeleteRecords The records to be deleted for the node.
	DeleteRecords []Record `json:"deleteRecords"`

	// UpsertRecords The records to be upserted for the node.
	UpsertRecords []Record `json:"upsertRecords"`
}

// PatchRecordsResult The object is used as a response to the patch records request.
type PatchRecordsResult struct {
	// Deleted The number of deleted records.
	Deleted int `json:"deleted"`

	// Upserted The number of upserted records.
	Upserted int `json:"upserted"`
}

// Record The object contains information about the index record.
type Record struct {
	// Format The format of the record.
	Format string `json:"format"`

	// Id The record identifier within the node.
	Id string `json:"id"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the record within a search result set.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Segment The searchable text for the record.
	Segment string `json:"segment"`

	// Vector The vector data for the segment.
	Vector []byte `json:"vector"`
}

// SearchRecordsRequest The object is used to search text across all the index records.
type SearchRecordsRequest struct {
	// Limit The maximum number of records per page.
	Limit int `json:"limit"`

	// Offset The number of records to skip before start returning results.
	Offset int `json:"offset"`

	// Path The node path where the text to be searched for, by default, this includes the node subtrees too.
	Path string `json:"path"`

	// Strict The strict flag limits the search scope strictly to the node located by the provided path, i.e. the node subtrees are not included.
	Strict bool `json:"strict"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`

	// Text The text to be found in the records.
	Text string `json:"text"`
}

// SearchRecordsResult The object is used as a response to the search records request.
type SearchRecordsResult struct {
	// Items The found index records.
	Items []SearchRecordsResultItem `json:"items"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// SearchRecordsResultItem The object is used as an item in the search records response.
type SearchRecordsResultItem struct {
	// MatchedKeywords The matched keywords within the record.
	MatchedKeywords []string `json:"matchedKeywords"`

	// Path The path of the record.
	Path string `json:"path"`

	// Record The object contains information about the index record.
	Record Record `json:"record"`

	// Score The relevancy score of the record.
	Score float32 `json:"score"`
}

// Tags The object describes the node tags.
type Tags map[string]string

// CreatedAfterFilter defines model for CreatedAfterFilter.
type CreatedAfterFilter = time.Time

// CreatedBeforeFilter defines model for CreatedBeforeFilter.
type CreatedBeforeFilter = time.Time

// FormatFilter defines model for FormatFilter.
type FormatFilter = string

// FormatId defines model for FormatId.
type FormatId = string

// Limit defines model for Limit.
type Limit = int

// PageId defines model for PageId.
type PageId = string

// Path defines model for Path.
type Path = string

// PathFilter defines model for PathFilter.
type PathFilter = string

// TagsFilter The object describes the node tags.
type TagsFilter = Tags

// ListNodesParams defines parameters for ListNodes.
type ListNodesParams struct {
	// Path The path specifies the path to filter by.
	Path *PathFilter `form:"path,omitempty" json:"path,omitempty"`
}

// ListNodeRecordsParams defines parameters for ListNodeRecords.
type ListNodeRecordsParams struct {
	// Format The format specifies the format to filter the records by.
	Format *FormatFilter `form:"format,omitempty" json:"format,omitempty"`

	// CreatedAfter The createdAfter specifies the lowest creation time (exclusive) the resulting records can have.
	CreatedAfter *CreatedAfterFilter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore The createdBefore specifies the greatest creation time (exclusive) the resulting records can have.
	CreatedBefore *CreatedBeforeFilter `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// PageId The pageId specifies from which page to start return results.
	PageId *PageId `form:"pageId,omitempty" json:"pageId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateNodeRecordsMultipartBody defines parameters for CreateNodeRecords.
type CreateNodeRecordsMultipartBody struct {
	// File The document binary data in the specified format.
	File *openapi_types.File `json:"file,omitempty"`

	// Meta The object is used for records creation.
	Meta *CreateRecordsRequest `json:"meta,omitempty"`
}

// CreateFormatJSONRequestBody defines body for CreateFormat for application/json ContentType.
type CreateFormatJSONRequestBody = Format

// PatchNodeRecordsJSONRequestBody defines body for PatchNodeRecords for application/json ContentType.
type PatchNodeRecordsJSONRequestBody = PatchRecordsRequest

// CreateNodeRecordsJSONRequestBody defines body for CreateNodeRecords for application/json ContentType.
type CreateNodeRecordsJSONRequestBody = CreateRecordsRequest

// CreateNodeRecordsMultipartRequestBody defines body for CreateNodeRecords for multipart/form-data ContentType.
type CreateNodeRecordsMultipartRequestBody CreateNodeRecordsMultipartBody

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List formats
	// (GET /formats)
	ListFormats(c *gin.Context)
	// Create new format
	// (POST /formats)
	CreateFormat(c *gin.Context)
	// Delete format
	// (DELETE /formats/{formatId})
	DeleteFormat(c *gin.Context, formatId FormatId)
	// Get format
	// (GET /formats/{formatId})
	GetFormat(c *gin.Context, formatId FormatId)
	// List nodes
	// (GET /nodes)
	ListNodes(c *gin.Context, params ListNodesParams)
	// Delete node
	// (DELETE /nodes/{path})
	DeleteNode(c *gin.Context, path Path)
	// List node records
	// (GET /nodes/{path}/records)
	ListNodeRecords(c *gin.Context, path Path, params ListNodeRecordsParams)
	// Patch node records
	// (PATCH /nodes/{path}/records)
	PatchNodeRecords(c *gin.Context, path Path)
	// Create node records
	// (POST /nodes/{path}/records)
	CreateNodeRecords(c *gin.Context, path Path)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListFormats operation middleware
func (siw *ServerInterfaceWrapper) ListFormats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFormats(c)
}

// CreateFormat operation middleware
func (siw *ServerInterfaceWrapper) CreateFormat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateFormat(c)
}

// DeleteFormat operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFormat(c, formatId)
}

// GetFormat operation middleware
func (siw *ServerInterfaceWrapper) GetFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormat(c, formatId)
}

// ListNodes operation middleware
func (siw *ServerInterfaceWrapper) ListNodes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodesParams

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", c.Request.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNodes(c, params)
}

// DeleteNode operation middleware
func (siw *ServerInterfaceWrapper) DeleteNode(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNode(c, path)
}

// ListNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) ListNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodeRecordsParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAfter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdBefore: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageId", c.Request.URL.Query(), &params.PageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNodeRecords(c, path, params)
}

// PatchNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) PatchNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchNodeRecords(c, path)
}

// CreateNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNodeRecords(c, path)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Search(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/formats", wrapper.ListFormats)
	router.POST(options.BaseURL+"/formats", wrapper.CreateFormat)
	router.DELETE(options.BaseURL+"/formats/:formatId", wrapper.DeleteFormat)
	router.GET(options.BaseURL+"/formats/:formatId", wrapper.GetFormat)
	router.GET(options.BaseURL+"/nodes", wrapper.ListNodes)
	router.DELETE(options.BaseURL+"/nodes/:path", wrapper.DeleteNode)
	router.GET(options.BaseURL+"/nodes/:path/records", wrapper.ListNodeRecords)
	router.PATCH(options.BaseURL+"/nodes/:path/records", wrapper.PatchNodeRecords)
	router.POST(options.BaseURL+"/nodes/:path/records", wrapper.CreateNodeRecords)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.POST(options.BaseURL+"/search", wrapper.Search)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9qIusugjIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
