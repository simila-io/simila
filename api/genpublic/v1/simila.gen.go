// Package similapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package similapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for NodeType.
const (
	Document NodeType = "document"
	Folder   NodeType = "folder"
)

// CreateRecordsRequest The object is used for records creation.
type CreateRecordsRequest struct {
	// Document The binary data for the document of the specified format.
	Document []byte `json:"document"`

	// NodeType The object describes the index node type.
	NodeType NodeType `json:"nodeType"`

	// Parser The parser name (format name) to be used for the document body.
	Parser string `json:"parser"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the records within a search result set, the value is overridden by the rankMultiplier value specified for an individual record.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Records The list of records that must be added to the node.
	Records []Record `json:"records"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`
}

// CreateRecordsResult The object is used as a response of the records creation request.
type CreateRecordsResult struct {
	// NodesCreated The list of nodes created.
	NodesCreated []Node `json:"nodesCreated"`

	// RecordsCreated The number of records created.
	RecordsCreated int `json:"recordsCreated"`
}

// DeleteNodesRequest The object is used to delete multiple nodes at a time
type DeleteNodesRequest struct {
	// FilterConditions The filter conditions. The filters support `and`, `or` and `not` conditions for `format`, `path` and `tag("name")`, for instance, `tag("public") = "true" and format = "spreadsheetsData" and (path = "/orgs/1234/balance.xlsx" or path like "/orgs/%"))`.
	FilterConditions string `json:"filterConditions"`

	// Force The flag allows to delete children of a matched node, even if they don't meet the filter criteria
	Force bool `json:"force"`
}

// Format The object describes a data format.
type Format struct {
	// Basis The format basis specifies format dimensions.
	Basis []byte `json:"basis"`

	// Name The format name, it is used as the format identifier.
	Name string `json:"name"`
}

// Formats The object is used as a response of the formats list request.
type Formats struct {
	// Formats Contains a list of formats.
	Formats []Format `json:"formats"`
}

// ListNodesResult The object is used as a response of the nodes list request.
type ListNodesResult struct {
	// Items The list of nodes.
	Items []Node `json:"items"`
}

// ListRecordsResult The object is used a response to the list records request.
type ListRecordsResult struct {
	// NextPageId The id of the next page for getting the rest of the records.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Records The list of found records.
	Records *[]Record `json:"records,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Node The object describes the index node.
type Node struct {
	// Name The node name, must be unique among the siblings in the tree.
	Name string `json:"name"`

	// Path The node path, does not include the name part.
	Path string `json:"path"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`

	// Type The object describes the index node type.
	Type NodeType `json:"type"`
}

// NodeType The object describes the index node type.
type NodeType string

// PatchRecordsRequest The object is used to upsert and delete the node records.
type PatchRecordsRequest struct {
	// DeleteRecords The records to be deleted for the node.
	DeleteRecords []Record `json:"deleteRecords"`

	// UpsertRecords The records to be upserted for the node.
	UpsertRecords []Record `json:"upsertRecords"`
}

// PatchRecordsResult The object is used as a response to the patch records request.
type PatchRecordsResult struct {
	// Deleted The number of deleted records.
	Deleted int `json:"deleted"`

	// Upserted The number of upserted records.
	Upserted int `json:"upserted"`
}

// Record The object contains information about the index record.
type Record struct {
	// Format The format of the record.
	Format string `json:"format"`

	// Id The record identifier within the node.
	Id string `json:"id"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the record within a search result set.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Segment The searchable text for the record.
	Segment string `json:"segment"`

	// Vector The vector data for the segment.
	Vector []byte `json:"vector"`
}

// SearchRecordsRequest The object is used to perform search across the index records.
type SearchRecordsRequest struct {
	// FilterConditions The filter conditions. The filters support `and`, `or` and `not` conditions for `format`, `path` and `tag("name")`, for instance, `tag("public") = "true" and format = "spreadsheetsData" and (path = "/orgs/1234/balance.xlsx" or path like "/orgs/%")`.
	FilterConditions string `json:"filterConditions"`

	// GroupByPathOff The flag turns off results grouping by path.
	GroupByPathOff bool `json:"groupByPathOff"`

	// Limit The maximum number of records per page.
	Limit int `json:"limit"`

	// Offset The number of records to skip before start returning results.
	Offset int `json:"offset"`

	// TextQuery The text query. The query must be formed in accordance with the query language of the underlying search engine.
	TextQuery string `json:"textQuery"`
}

// SearchRecordsResult The object is used as a response to the search records request.
type SearchRecordsResult struct {
	// Items The found index records.
	Items []SearchRecordsResultItem `json:"items"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// SearchRecordsResultItem The object is used as an item in the search records response.
type SearchRecordsResultItem struct {
	// MatchedKeywords The matched keywords within the record.
	MatchedKeywords []string `json:"matchedKeywords"`

	// Path The path of the record.
	Path string `json:"path"`

	// Record The object contains information about the index record.
	Record Record `json:"record"`

	// Score The relevancy score of the record.
	Score float32 `json:"score"`
}

// Tags The object describes the node tags.
type Tags map[string]string

// CreatedAfterFilter defines model for CreatedAfterFilter.
type CreatedAfterFilter = time.Time

// CreatedBeforeFilter defines model for CreatedBeforeFilter.
type CreatedBeforeFilter = time.Time

// Force defines model for Force.
type Force = bool

// FormatFilter defines model for FormatFilter.
type FormatFilter = string

// FormatId defines model for FormatId.
type FormatId = string

// Limit defines model for Limit.
type Limit = int

// PageId defines model for PageId.
type PageId = string

// Path defines model for Path.
type Path = string

// PathFilter defines model for PathFilter.
type PathFilter = string

// TagsFilter The object describes the node tags.
type TagsFilter = Tags

// ListNodesParams defines parameters for ListNodes.
type ListNodesParams struct {
	// Path The path specifies the path to filter by.
	Path *PathFilter `form:"path,omitempty" json:"path,omitempty"`
}

// DeleteNodeParams defines parameters for DeleteNode.
type DeleteNodeParams struct {
	// Force force flag specifies whether the operation will force the request.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListNodeRecordsParams defines parameters for ListNodeRecords.
type ListNodeRecordsParams struct {
	// Format The format specifies the format to filter the records by.
	Format *FormatFilter `form:"format,omitempty" json:"format,omitempty"`

	// CreatedAfter The createdAfter specifies the lowest creation time (exclusive) the resulting records can have.
	CreatedAfter *CreatedAfterFilter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore The createdBefore specifies the greatest creation time (exclusive) the resulting records can have.
	CreatedBefore *CreatedBeforeFilter `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// PageId The pageId specifies from which page to start return results.
	PageId *PageId `form:"pageId,omitempty" json:"pageId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateNodeRecordsMultipartBody defines parameters for CreateNodeRecords.
type CreateNodeRecordsMultipartBody struct {
	// File The document binary data in the specified format.
	File *openapi_types.File `json:"file,omitempty"`

	// Meta The object is used for records creation.
	Meta *CreateRecordsRequest `json:"meta,omitempty"`
}

// CreateFormatJSONRequestBody defines body for CreateFormat for application/json ContentType.
type CreateFormatJSONRequestBody = Format

// DeleteNodesJSONRequestBody defines body for DeleteNodes for application/json ContentType.
type DeleteNodesJSONRequestBody = DeleteNodesRequest

// UpdateNodeJSONRequestBody defines body for UpdateNode for application/json ContentType.
type UpdateNodeJSONRequestBody = Node

// PatchNodeRecordsJSONRequestBody defines body for PatchNodeRecords for application/json ContentType.
type PatchNodeRecordsJSONRequestBody = PatchRecordsRequest

// CreateNodeRecordsJSONRequestBody defines body for CreateNodeRecords for application/json ContentType.
type CreateNodeRecordsJSONRequestBody = CreateRecordsRequest

// CreateNodeRecordsMultipartRequestBody defines body for CreateNodeRecords for multipart/form-data ContentType.
type CreateNodeRecordsMultipartRequestBody CreateNodeRecordsMultipartBody

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List formats
	// (GET /formats)
	ListFormats(c *gin.Context)
	// Create new format
	// (POST /formats)
	CreateFormat(c *gin.Context)
	// Delete format
	// (DELETE /formats/{formatId})
	DeleteFormat(c *gin.Context, formatId FormatId)
	// Get format
	// (GET /formats/{formatId})
	GetFormat(c *gin.Context, formatId FormatId)
	// Delete nodes
	// (DELETE /nodes)
	DeleteNodes(c *gin.Context)
	// List nodes
	// (GET /nodes)
	ListNodes(c *gin.Context, params ListNodesParams)
	// Delete node
	// (DELETE /nodes/{path})
	DeleteNode(c *gin.Context, path Path, params DeleteNodeParams)
	// Update node
	// (PUT /nodes/{path})
	UpdateNode(c *gin.Context, path Path)
	// List node records
	// (GET /nodes/{path}/records)
	ListNodeRecords(c *gin.Context, path Path, params ListNodeRecordsParams)
	// Patch node records
	// (PATCH /nodes/{path}/records)
	PatchNodeRecords(c *gin.Context, path Path)
	// Create node records
	// (POST /nodes/{path}/records)
	CreateNodeRecords(c *gin.Context, path Path)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListFormats operation middleware
func (siw *ServerInterfaceWrapper) ListFormats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListFormats(c)
}

// CreateFormat operation middleware
func (siw *ServerInterfaceWrapper) CreateFormat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateFormat(c)
}

// DeleteFormat operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteFormat(c, formatId)
}

// GetFormat operation middleware
func (siw *ServerInterfaceWrapper) GetFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFormat(c, formatId)
}

// DeleteNodes operation middleware
func (siw *ServerInterfaceWrapper) DeleteNodes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNodes(c)
}

// ListNodes operation middleware
func (siw *ServerInterfaceWrapper) ListNodes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodesParams

	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", c.Request.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListNodes(c, params)
}

// DeleteNode operation middleware
func (siw *ServerInterfaceWrapper) DeleteNode(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNodeParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter force: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteNode(c, path, params)
}

// UpdateNode operation middleware
func (siw *ServerInterfaceWrapper) UpdateNode(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateNode(c, path)
}

// ListNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) ListNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodeRecordsParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAfter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdBefore: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageId", c.Request.URL.Query(), &params.PageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListNodeRecords(c, path, params)
}

// PatchNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) PatchNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchNodeRecords(c, path)
}

// CreateNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateNodeRecords(c, path)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Ping(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Search(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/formats", wrapper.ListFormats)

	router.POST(options.BaseURL+"/formats", wrapper.CreateFormat)

	router.DELETE(options.BaseURL+"/formats/:formatId", wrapper.DeleteFormat)

	router.GET(options.BaseURL+"/formats/:formatId", wrapper.GetFormat)

	router.DELETE(options.BaseURL+"/nodes", wrapper.DeleteNodes)

	router.GET(options.BaseURL+"/nodes", wrapper.ListNodes)

	router.DELETE(options.BaseURL+"/nodes/:path", wrapper.DeleteNode)

	router.PUT(options.BaseURL+"/nodes/:path", wrapper.UpdateNode)

	router.GET(options.BaseURL+"/nodes/:path/records", wrapper.ListNodeRecords)

	router.PATCH(options.BaseURL+"/nodes/:path/records", wrapper.PatchNodeRecords)

	router.POST(options.BaseURL+"/nodes/:path/records", wrapper.CreateNodeRecords)

	router.GET(options.BaseURL+"/ping", wrapper.Ping)

	router.POST(options.BaseURL+"/search", wrapper.Search)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/TkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
