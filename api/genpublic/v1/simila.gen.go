// Package similapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package similapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for NodeType.
const (
	Document NodeType = "document"
	Folder   NodeType = "folder"
)

// CreateRecordsRequest The object is used for records creation.
type CreateRecordsRequest struct {
	// Document The binary data for the document of the specified format.
	Document []byte `json:"document"`

	// NodeType The object describes the index node type.
	NodeType NodeType `json:"nodeType"`

	// Parser The parser name (format name) to be used for the document body.
	Parser string `json:"parser"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the records within a search result set, the value is overridden by the rankMultiplier value specified for an individual record.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Records The list of records that must be added to the node.
	Records []Record `json:"records"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`
}

// CreateRecordsResult The object is used as a response of the records creation request.
type CreateRecordsResult struct {
	// NodesCreated The list of nodes created.
	NodesCreated []Node `json:"nodesCreated"`

	// RecordsCreated The number of records created.
	RecordsCreated int `json:"recordsCreated"`
}

// DeleteNodesRequest The object is used to delete multiple nodes at a time
type DeleteNodesRequest struct {
	// FilterConditions The filter conditions. The filters support `and`, `or` and `not` conditions for `format`, `path` and `tag("name")`, for instance, `tag("public") = "true" and format = "spreadsheetsData" and (path = "/orgs/1234/balance.xlsx" or path like "/orgs/%"))`.
	FilterConditions string `json:"filterConditions"`

	// Force The flag allows to delete children of a matched node, even if they don't meet the filter criteria
	Force bool `json:"force"`
}

// Format The object describes a data format.
type Format struct {
	// Basis The format basis specifies format dimensions.
	Basis []byte `json:"basis"`

	// Name The format name, it is used as the format identifier.
	Name string `json:"name"`
}

// Formats The object is used as a response of the formats list request.
type Formats struct {
	// Formats Contains a list of formats.
	Formats []Format `json:"formats"`
}

// ListNodesResult The object is used as a response of the nodes list request.
type ListNodesResult struct {
	// Items The list of nodes.
	Items []Node `json:"items"`
}

// ListRecordsResult The object is used a response to the list records request.
type ListRecordsResult struct {
	// NextPageId The id of the next page for getting the rest of the records.
	NextPageId *string `json:"nextPageId,omitempty"`

	// Records The list of found records.
	Records *[]Record `json:"records,omitempty"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// Node The object describes the index node.
type Node struct {
	// Name The node name, must be unique among the siblings in the tree.
	Name string `json:"name"`

	// Path The node path, does not include the name part.
	Path string `json:"path"`

	// Tags The object describes the node tags.
	Tags Tags `json:"tags"`

	// Type The object describes the index node type.
	Type NodeType `json:"type"`
}

// NodeType The object describes the index node type.
type NodeType string

// PatchRecordsRequest The object is used to upsert and delete the node records.
type PatchRecordsRequest struct {
	// DeleteRecords The records to be deleted for the node.
	DeleteRecords []Record `json:"deleteRecords"`

	// UpsertRecords The records to be upserted for the node.
	UpsertRecords []Record `json:"upsertRecords"`
}

// PatchRecordsResult The object is used as a response to the patch records request.
type PatchRecordsResult struct {
	// Deleted The number of deleted records.
	Deleted int `json:"deleted"`

	// Upserted The number of upserted records.
	Upserted int `json:"upserted"`
}

// Record The object contains information about the index record.
type Record struct {
	// Format The format of the record.
	Format string `json:"format"`

	// Id The record identifier within the node.
	Id string `json:"id"`

	// RankMultiplier The priority coefficient (must be >= 1.0) of the record within a search result set.
	RankMultiplier float32 `json:"rankMultiplier"`

	// Segment The searchable text for the record.
	Segment string `json:"segment"`

	// Vector The vector data for the segment.
	Vector []byte `json:"vector"`
}

// SearchRecordsRequest The object is used to perform search across the index records.
type SearchRecordsRequest struct {
	// FilterConditions The filter conditions. The filters support `and`, `or` and `not` conditions for `format`, `path` and `tag("name")`, for instance, `tag("public") = "true" and format = "spreadsheetsData" and (path = "/orgs/1234/balance.xlsx" or path like "/orgs/%")`.
	FilterConditions string `json:"filterConditions"`

	// GroupByPathOff The flag turns off results grouping by path.
	GroupByPathOff bool `json:"groupByPathOff"`

	// Limit The maximum number of records per page.
	Limit int `json:"limit"`

	// Offset The number of records to skip before start returning results.
	Offset int `json:"offset"`

	// TextQuery The text query. The query must be formed in accordance with the query language of the underlying search engine.
	TextQuery string `json:"textQuery"`
}

// SearchRecordsResult The object is used as a response to the search records request.
type SearchRecordsResult struct {
	// Items The found index records.
	Items []SearchRecordsResultItem `json:"items"`

	// Total The total number of found records.
	Total int `json:"total"`
}

// SearchRecordsResultItem The object is used as an item in the search records response.
type SearchRecordsResultItem struct {
	// MatchedKeywords The matched keywords within the record.
	MatchedKeywords []string `json:"matchedKeywords"`

	// Path The path of the record.
	Path string `json:"path"`

	// Record The object contains information about the index record.
	Record Record `json:"record"`

	// Score The relevancy score of the record.
	Score float32 `json:"score"`
}

// Tags The object describes the node tags.
type Tags map[string]string

// ConditionFilter defines model for ConditionFilter.
type ConditionFilter = string

// CreatedAfterFilter defines model for CreatedAfterFilter.
type CreatedAfterFilter = time.Time

// CreatedBeforeFilter defines model for CreatedBeforeFilter.
type CreatedBeforeFilter = time.Time

// Force defines model for Force.
type Force = bool

// FormatFilter defines model for FormatFilter.
type FormatFilter = string

// FormatId defines model for FormatId.
type FormatId = string

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// PageId defines model for PageId.
type PageId = string

// Path defines model for Path.
type Path = string

// TagsFilter The object describes the node tags.
type TagsFilter = Tags

// ListNodesParams defines parameters for ListNodes.
type ListNodesParams struct {
	// Condition The condition contatins the simila QL expression to select nodes by the filter
	Condition *ConditionFilter `form:"condition,omitempty" json:"condition,omitempty"`

	// Offset The offset defines the number of the objects that should be skipped in the result response
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeleteNodeParams defines parameters for DeleteNode.
type DeleteNodeParams struct {
	// Force force flag specifies whether the operation will force the request.
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListNodeRecordsParams defines parameters for ListNodeRecords.
type ListNodeRecordsParams struct {
	// Format The format specifies the format to filter the records by.
	Format *FormatFilter `form:"format,omitempty" json:"format,omitempty"`

	// CreatedAfter The createdAfter specifies the lowest creation time (exclusive) the resulting records can have.
	CreatedAfter *CreatedAfterFilter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore The createdBefore specifies the greatest creation time (exclusive) the resulting records can have.
	CreatedBefore *CreatedBeforeFilter `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// PageId The pageId specifies from which page to start return results.
	PageId *PageId `form:"pageId,omitempty" json:"pageId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateNodeRecordsMultipartBody defines parameters for CreateNodeRecords.
type CreateNodeRecordsMultipartBody struct {
	// File The document binary data in the specified format.
	File *openapi_types.File `json:"file,omitempty"`

	// Meta The object is used for records creation.
	Meta *CreateRecordsRequest `json:"meta,omitempty"`
}

// CreateFormatJSONRequestBody defines body for CreateFormat for application/json ContentType.
type CreateFormatJSONRequestBody = Format

// DeleteNodesJSONRequestBody defines body for DeleteNodes for application/json ContentType.
type DeleteNodesJSONRequestBody = DeleteNodesRequest

// UpdateNodeJSONRequestBody defines body for UpdateNode for application/json ContentType.
type UpdateNodeJSONRequestBody = Node

// PatchNodeRecordsJSONRequestBody defines body for PatchNodeRecords for application/json ContentType.
type PatchNodeRecordsJSONRequestBody = PatchRecordsRequest

// CreateNodeRecordsJSONRequestBody defines body for CreateNodeRecords for application/json ContentType.
type CreateNodeRecordsJSONRequestBody = CreateRecordsRequest

// CreateNodeRecordsMultipartRequestBody defines body for CreateNodeRecords for multipart/form-data ContentType.
type CreateNodeRecordsMultipartRequestBody CreateNodeRecordsMultipartBody

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRecordsRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List formats
	// (GET /formats)
	ListFormats(c *gin.Context)
	// Create new format
	// (POST /formats)
	CreateFormat(c *gin.Context)
	// Delete format
	// (DELETE /formats/{formatId})
	DeleteFormat(c *gin.Context, formatId FormatId)
	// Get format
	// (GET /formats/{formatId})
	GetFormat(c *gin.Context, formatId FormatId)
	// Delete nodes
	// (DELETE /nodes)
	DeleteNodes(c *gin.Context)
	// List nodes
	// (GET /nodes)
	ListNodes(c *gin.Context, params ListNodesParams)
	// Delete node
	// (DELETE /nodes/{path})
	DeleteNode(c *gin.Context, path Path, params DeleteNodeParams)
	// Update node
	// (PUT /nodes/{path})
	UpdateNode(c *gin.Context, path Path)
	// List node records
	// (GET /nodes/{path}/records)
	ListNodeRecords(c *gin.Context, path Path, params ListNodeRecordsParams)
	// Patch node records
	// (PATCH /nodes/{path}/records)
	PatchNodeRecords(c *gin.Context, path Path)
	// Create node records
	// (POST /nodes/{path}/records)
	CreateNodeRecords(c *gin.Context, path Path)
	// Health check
	// (GET /ping)
	Ping(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListFormats operation middleware
func (siw *ServerInterfaceWrapper) ListFormats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFormats(c)
}

// CreateFormat operation middleware
func (siw *ServerInterfaceWrapper) CreateFormat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateFormat(c)
}

// DeleteFormat operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFormat(c, formatId)
}

// GetFormat operation middleware
func (siw *ServerInterfaceWrapper) GetFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormat(c, formatId)
}

// DeleteNodes operation middleware
func (siw *ServerInterfaceWrapper) DeleteNodes(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNodes(c)
}

// ListNodes operation middleware
func (siw *ServerInterfaceWrapper) ListNodes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodesParams

	// ------------- Optional query parameter "condition" -------------

	err = runtime.BindQueryParameter("form", true, false, "condition", c.Request.URL.Query(), &params.Condition)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter condition: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNodes(c, params)
}

// DeleteNode operation middleware
func (siw *ServerInterfaceWrapper) DeleteNode(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteNodeParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter force: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNode(c, path, params)
}

// UpdateNode operation middleware
func (siw *ServerInterfaceWrapper) UpdateNode(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNode(c, path)
}

// ListNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) ListNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNodeRecordsParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAfter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdBefore: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageId", c.Request.URL.Query(), &params.PageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNodeRecords(c, path, params)
}

// PatchNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) PatchNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchNodeRecords(c, path)
}

// CreateNodeRecords operation middleware
func (siw *ServerInterfaceWrapper) CreateNodeRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "path" -------------
	var path Path

	err = runtime.BindStyledParameter("simple", false, "path", c.Param("path"), &path)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter path: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNodeRecords(c, path)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Search(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/formats", wrapper.ListFormats)
	router.POST(options.BaseURL+"/formats", wrapper.CreateFormat)
	router.DELETE(options.BaseURL+"/formats/:formatId", wrapper.DeleteFormat)
	router.GET(options.BaseURL+"/formats/:formatId", wrapper.GetFormat)
	router.DELETE(options.BaseURL+"/nodes", wrapper.DeleteNodes)
	router.GET(options.BaseURL+"/nodes", wrapper.ListNodes)
	router.DELETE(options.BaseURL+"/nodes/:path", wrapper.DeleteNode)
	router.PUT(options.BaseURL+"/nodes/:path", wrapper.UpdateNode)
	router.GET(options.BaseURL+"/nodes/:path/records", wrapper.ListNodeRecords)
	router.PATCH(options.BaseURL+"/nodes/:path/records", wrapper.PatchNodeRecords)
	router.POST(options.BaseURL+"/nodes/:path/records", wrapper.CreateNodeRecords)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.POST(options.BaseURL+"/search", wrapper.Search)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Dv8OAAD//8LedpkzOwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
