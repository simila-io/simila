// Package similapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package similapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// CreateIndexRequest The object describes a new index request.
type CreateIndexRequest struct {
	// Document contains the binary data for the document of the specified format
	Document []byte `json:"document"`

	// Format the index format name
	Format string `json:"format"`

	// Id the new index identifier. It must not be more than 64 bytes long
	Id string `json:"id"`

	// Records the list of records that must be added to the new index.
	Records []Record `json:"records"`
	Tags    Tags     `json:"tags"`
}

// Format The object describes a data format.
type Format struct {
	// Name The format name. It is used as the format identifier
	Name string `json:"name"`
}

// Formats The object is used as response of contact objects query request.
type Formats struct {
	// Formats The list of all known formats
	Formats []Format `json:"formats"`
}

// Index An index description
type Index struct {
	CreatedAt time.Time `json:"createdAt"`
	Format    string    `json:"format"`
	Id        string    `json:"id"`
	Tags      Tags      `json:"tags"`
}

// Indexes The object contains information about an index record.
type Indexes struct {
	// Indexes The list of indexes
	Indexes []Index `json:"indexes"`

	// NextPageId the index Id for the next page, if presents
	NextPageId *string `json:"nextPageId,omitempty"`

	// Total total number of indexes that match the initial criteria
	Total int `json:"total"`
}

// PatchRecordsRequest defines model for PatchRecordsRequest.
type PatchRecordsRequest struct {
	DeleteRecords []Record `json:"deleteRecords"`
	Id            string   `json:"id"`
	UpsertRecords []Record `json:"upsertRecords"`
}

// PatchRecordsResult defines model for PatchRecordsResult.
type PatchRecordsResult struct {
	Deleted  int `json:"deleted"`
	Upserted int `json:"upserted"`
}

// Record The object contains information about an index record.
type Record struct {
	// Id the record identifier within the index. The value must be unique for the index and it is defined by the format parser.
	Id string `json:"id"`

	// Segment contains the searchable text for the record.
	Segment string `json:"segment"`

	// Vector contains the vector data for the record in the format basis. The format parser defines the basis and the field structure.
	Vector []byte `json:"vector"`
}

// RecordsResult defines model for RecordsResult.
type RecordsResult struct {
	NextPageId *string  `json:"nextPageId,omitempty"`
	Records    []Record `json:"records"`
	Total      int      `json:"total"`
}

// SearchRecord defines model for SearchRecord.
type SearchRecord struct {
	IndexId string `json:"indexId"`

	// IndexRecord The object contains information about an index record.
	IndexRecord     Record   `json:"indexRecord"`
	MatchedKeywords []string `json:"matchedKeywords"`
	Score           float32  `json:"score"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	Distinct     bool     `json:"distinct"`
	IndexIDs     []string `json:"indexIDs"`
	Limit        int      `json:"limit"`
	Offset       int      `json:"offset"`
	OrderByScore bool     `json:"orderByScore"`
	PageId       string   `json:"pageId"`
	Tags         Tags     `json:"tags"`
	Text         string   `json:"text"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	NextPageId *string        `json:"nextPageId,omitempty"`
	Records    []SearchRecord `json:"records"`
	Total      int            `json:"total"`
}

// Tags defines model for Tags.
type Tags map[string]string

// CreatedAfter defines model for CreatedAfter.
type CreatedAfter = time.Time

// CreatedBefore defines model for CreatedBefore.
type CreatedBefore = time.Time

// FormatId defines model for FormatId.
type FormatId = string

// FormatParam defines model for FormatParam.
type FormatParam = string

// IndexId defines model for IndexId.
type IndexId = string

// Limit defines model for Limit.
type Limit = int

// PageId defines model for PageId.
type PageId = string

// StartIndexId defines model for StartIndexId.
type StartIndexId = string

// TagsParam defines model for TagsParam.
type TagsParam = Tags

// GetIndexesParams defines parameters for GetIndexes.
type GetIndexesParams struct {
	// CreatedAfter start of time interval in which items are queried
	CreatedAfter *CreatedAfter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore end of time interval in which items are queried
	CreatedBefore *CreatedBefore `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// StartIndexId The indexId for the first record
	StartIndexId *StartIndexId `form:"startIndexId,omitempty" json:"startIndexId,omitempty"`
	Format       *FormatParam  `form:"format,omitempty" json:"format,omitempty"`
	Tags         *TagsParam    `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateIndexMultipartBody defines parameters for CreateIndex.
type CreateIndexMultipartBody struct {
	// File contains the binary data for the document of the specified format
	File *openapi_types.File `json:"file,omitempty"`

	// Meta The object describes a new index request.
	Meta *CreateIndexRequest `json:"meta,omitempty"`
}

// GetIndexRecordsParams defines parameters for GetIndexRecords.
type GetIndexRecordsParams struct {
	// PageId The pageId for the paging request
	PageId *PageId `form:"pageId,omitempty" json:"pageId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateFormatJSONRequestBody defines body for CreateFormat for application/json ContentType.
type CreateFormatJSONRequestBody = Format

// CreateIndexJSONRequestBody defines body for CreateIndex for application/json ContentType.
type CreateIndexJSONRequestBody = CreateIndexRequest

// CreateIndexMultipartRequestBody defines body for CreateIndex for multipart/form-data ContentType.
type CreateIndexMultipartRequestBody CreateIndexMultipartBody

// PutIndexJSONRequestBody defines body for PutIndex for application/json ContentType.
type PutIndexJSONRequestBody = Index

// PatchIndexRecordsJSONRequestBody defines body for PatchIndexRecords for application/json ContentType.
type PatchIndexRecordsJSONRequestBody = PatchRecordsRequest

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retreive all known formats
	// (GET /formats)
	GetFormats(c *gin.Context)
	// Create new format
	// (POST /formats)
	CreateFormat(c *gin.Context)

	// (DELETE /formats/{formatId})
	DeleteFormat(c *gin.Context, formatId FormatId)

	// (GET /formats/{formatId})
	GetFormat(c *gin.Context, formatId FormatId)
	// Retreive indexes
	// (GET /indexes)
	GetIndexes(c *gin.Context, params GetIndexesParams)
	// Create new index
	// (POST /indexes)
	CreateIndex(c *gin.Context)

	// (DELETE /indexes/{indexId})
	DeleteIndex(c *gin.Context, indexId IndexId)

	// (GET /indexes/{indexId})
	GetIndex(c *gin.Context, indexId IndexId)

	// (PUT /indexes/{indexId})
	PutIndex(c *gin.Context, indexId IndexId)

	// (GET /indexes/{indexId}/records)
	GetIndexRecords(c *gin.Context, indexId IndexId, params GetIndexRecordsParams)

	// (PATCH /indexes/{indexId}/records)
	PatchIndexRecords(c *gin.Context, indexId IndexId)

	// (GET /ping)
	Ping(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFormats operation middleware
func (siw *ServerInterfaceWrapper) GetFormats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFormats(c)
}

// CreateFormat operation middleware
func (siw *ServerInterfaceWrapper) CreateFormat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateFormat(c)
}

// DeleteFormat operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteFormat(c, formatId)
}

// GetFormat operation middleware
func (siw *ServerInterfaceWrapper) GetFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFormat(c, formatId)
}

// GetIndexes operation middleware
func (siw *ServerInterfaceWrapper) GetIndexes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndexesParams

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAfter: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdBefore: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startIndexId" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndexId", c.Request.URL.Query(), &params.StartIndexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startIndexId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetIndexes(c, params)
}

// CreateIndex operation middleware
func (siw *ServerInterfaceWrapper) CreateIndex(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateIndex(c)
}

// DeleteIndex operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteIndex(c, indexId)
}

// GetIndex operation middleware
func (siw *ServerInterfaceWrapper) GetIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetIndex(c, indexId)
}

// PutIndex operation middleware
func (siw *ServerInterfaceWrapper) PutIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutIndex(c, indexId)
}

// GetIndexRecords operation middleware
func (siw *ServerInterfaceWrapper) GetIndexRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %s", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndexRecordsParams

	// ------------- Optional query parameter "pageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageId", c.Request.URL.Query(), &params.PageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageId: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetIndexRecords(c, indexId, params)
}

// PatchIndexRecords operation middleware
func (siw *ServerInterfaceWrapper) PatchIndexRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchIndexRecords(c, indexId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Ping(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Search(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/formats", wrapper.GetFormats)

	router.POST(options.BaseURL+"/formats", wrapper.CreateFormat)

	router.DELETE(options.BaseURL+"/formats/:formatId", wrapper.DeleteFormat)

	router.GET(options.BaseURL+"/formats/:formatId", wrapper.GetFormat)

	router.GET(options.BaseURL+"/indexes", wrapper.GetIndexes)

	router.POST(options.BaseURL+"/indexes", wrapper.CreateIndex)

	router.DELETE(options.BaseURL+"/indexes/:indexId", wrapper.DeleteIndex)

	router.GET(options.BaseURL+"/indexes/:indexId", wrapper.GetIndex)

	router.PUT(options.BaseURL+"/indexes/:indexId", wrapper.PutIndex)

	router.GET(options.BaseURL+"/indexes/:indexId/records", wrapper.GetIndexRecords)

	router.PATCH(options.BaseURL+"/indexes/:indexId/records", wrapper.PatchIndexRecords)

	router.GET(options.BaseURL+"/ping", wrapper.Ping)

	router.POST(options.BaseURL+"/search", wrapper.Search)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RaX2/juBH/KgO1QFtAF+e6QYHmLdvDHowrUGN337b7QIsjm1eJ1JKjJEbg717wn/5Y",
	"lO1knWDv0RLFmfnNb4YzQz9lhaobJVGSyW6fsoZpViOhdr/+pZER8ruSUNvfHE2hRUNCyew2M8Q0gSqB",
	"RI0gJKG+ZxUICQ9bUWxBENYGmEb41qIWyLM8E/ZD+3OX5ZlkNWa3WTGUkmem2GLNrLhS6ZpRdptxRviT",
	"lZLlGe0adMK1kJtsv8+jlu+xVBqnaqLkl1MyCHmBlh/csiWfKvh5i+A3AcFRkigF6quoR8No26tRxl3y",
	"TOO3Vmjk2S3pFocazQlfWefaBSkDgxnH91lKjo9zNgj78rQJIuzxPAv+LWpBabmVfQUcSyHRAG0RavYI",
	"sq3XqK3n1fp3LMiARmq1RA4NamjYBq9mfO02TCFh6bNB7RRasQ3OIdG4d9apTp2GbYTcgDUXDc0I9d+c",
	"wP+TDbnTThjILoU2BBoLpeeobYabHpf/mW3MURYR25jRHn/WWGa32Z8WfZ5Z+LdmYXfL9nbf8KTPOU6d",
	"jwGwpKHeq+BfrNEAA4kPgYQBauvgRqsGNQl0u3NVtDXKxJ6FksSE9ARaC8n0Djgj1iEZP3XJZItgGiws",
	"zzl0odOlgvWOElmgX3AonLrwCYnAwZnYQPD0x73pg/iDJUHdGgKpCNYItdIItGUS/nEDVkUDlZKblBxP",
	"GJMWVgnjUAiL7JZB0BqBcY4cSMFILRdqNtWe4sRHz9R9pxPTmu3cb8uW8xg1TC1fLGZ5n94CQzsi9LZ+",
	"7WR6bmVd4jybgZEwNUtwz4fIkexvFzinCQOtQQ7Ms3FyOCQPmKHJTtS8PeaoQQPpGk2jpEHrbRcgBXXp",
	"1EX+fKSVxyRFBrGqgv9J9SAhLj+TJsEvE5oc4BB3TUHhUsxUvTsZAmn4+NC4WLLQuQXAMPRngnry+LKE",
	"71WeBQOP86LLkEL6zYWSwNaqJWCyS7w2lqZsEMf2j2yIi87kgHdgIlNIfKS547nPtIND0n7gDu0cRAmN",
	"RuPq4YQXSRGrErvax4OSI1gSMiOjYgtesCDBKii0INSC9RKGlcXIlR0kXnLKdyu7v8+bZnBkHhx8WCHh",
	"xz6tf2c2nuFs2xjUdCkxKV6PJeQHhp3Gx7TVLDw8VetFkem3Byp2S/Nuy5RKweBXi7YZ4vv1g4MEHgRt",
	"hYQuKq7AqnDPqha7E72V4luLXbB40UxyEO6s8IU3h/VueFg1TBvfAkw4YnBzRglmkOliy9YVAtnwjOJ7",
	"mycb32NBSp/Y1y8al3YRFzm0YM2MMB6PkU2jTsMtcmD4YhsrDoZ0W1CrXX9xoiRMMTzi0xk0z6BZPo9T",
	"4LHy7nurspgQTwSG7gJ2PpF9ci7vYyNxhMzYI3y7ED88zxSXl5H/hruHCRjTxH9gtynCsKFzcFkpf976",
	"lf4wSCf0pW/Fep2nykQJx3CaS/XCkJDFsNZYK1Uhkx1Uy1+eaW4V2+9pdlRlaXDuneao3+8+RbCm6jTz",
	"JD2//skzmyLSLesQfLeqq4g6JPIesgOV874tD2ZGKI755U1CchQsrxyYn4MnGOfC5lRWrUamzdEn7rB3",
	"vCvVNDV/ErWoGBjU96JAuFst/2urbRJUYf/6brV02VAb/9XPV9dX145fDUrWiOw2e3d1ffXO+Yu2TqfF",
	"oAHZ4EwLV9gGxM+FzLQZsfnbmunOXuu27FekD12jEpsjJ+Lv1z+7xkBJCmcba5pKFO7bxe/Ginw6cy4S",
	"RTjcZspljaQF3iMH0xYFGlO2VbW7cu41bV0zvctus49IGsU9JhstH19fup7wqw1HZY5BxapKPRjb3ft2",
	"IgxdYoNa2pKAKzTyLwT4aPXcIU1h9DOeD7FDCT3ke8V3F8bQQzieM+5f3XNzjgswPTAT4Js4L89urv85",
	"xf9D+FCQ7yNsew+s0sj4zuNsDhzvER44J+nvfd6FyeIpjpb3fT081eQX97wrkXYgyDh1/toXlX8bFU01",
	"260RQjEcKCKMG0n5KYOMT4e43AvmLL1bLR3zphzymnQcGl5cfEk7qV+y6Ibx+68TNtxMrf7Pb94179Jl",
	"dbC0UG3F46wtGJxDwVqD0Tz7MpoY6uVooZdwc1RCwK1UreSzZBms99TIYd0SFEyOVQPeoo1ko2q03YYh",
	"zYQMTErlhmQW/RXpBBvmk+hF3Xb9BkEcefAcL+3nAm8wErnk+bTsJgbPw3Z017fPz10fLsTO+GB0d3HG",
	"+uGd1RnL+6uJMxb726RXZVH0wwyN0sf0YNwTOBO3efnhPOjrwzKjpmv7zj5O9ZmBB0xl3sENzSsd3ok7",
	"IAtY3VYkGqbJHVo/2RZ+vOfBBFpU+Nr3PO771CyiRnqpmYni+UepYMIV03PrF2diX74s+dnFiwgsm4bD",
	"IIUunkJXfVC6pAqGSNvnJccubT2rXLg5Nn52aJi22ILg80fGMPzDKZHO+Jc06cJJ8AUn6UshatoERKv2",
	"IhBdPs0N0DkV4H9UlySjdDGYdRwldT/lf6HjTlcCYSLzY9QM46HuG4YNo2KbCBz7+DKOeKUISl19vXE8",
	"JW6X3jK4GltvzMXRSrh/d3yX7YcT1blqNqrnZHrd/BWOK8xC5TpWz48wX6mGHA/J35gUZ/FhAFpA4ut+",
	"v9//PwAA//8q109tkykAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
