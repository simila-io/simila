// Package similapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package similapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateIndexRequest The object describes a new index request.
type CreateIndexRequest struct {
	// Document contains the binary data for the document of the specified format
	Document *openapi_types.File `json:"document,omitempty"`

	// Format the index format name
	Format string `json:"format"`

	// Id the new index identifier. It must not be more than 64 bytes long
	Id string `json:"id"`

	// Records the list of records that must be added to the new index.
	Records *[]Record `json:"records,omitempty"`

	// Tags the key:value string pairs for the applied tags values
	Tags *map[string]interface{} `json:"tags,omitempty"`
}

// Format The object describes a data format.
type Format struct {
	// Name The format name. It is used as the format identifier
	Name string `json:"name"`
}

// Formats The object is used as response of contact objects query request.
type Formats struct {
	// Formats The list of all known formats
	Formats []Format `json:"formats"`
}

// Index An index description
type Index struct {
	CreateAt *time.Time              `json:"createAt,omitempty"`
	Format   *string                 `json:"format,omitempty"`
	Id       *string                 `json:"id,omitempty"`
	Tags     *map[string]interface{} `json:"tags,omitempty"`
}

// Indexes The object contains information about an index record.
type Indexes struct {
	// Indexes The list of indexes
	Indexes *[]Index `json:"indexes,omitempty"`

	// NextIndexId the index Id for the next page, if presents
	NextIndexId *string `json:"nextIndexId,omitempty"`

	// Total total number of indexes that match the initial criteria
	Total *int `json:"total,omitempty"`
}

// PatchRecordsRequest defines model for PatchRecordsRequest.
type PatchRecordsRequest struct {
	DeleteRecords *[]Record `json:"deleteRecords,omitempty"`
	Id            *string   `json:"id,omitempty"`
	UpsertRecords *[]Record `json:"upsertRecords,omitempty"`
}

// PatchRecordsResult defines model for PatchRecordsResult.
type PatchRecordsResult struct {
	Deleted  *int `json:"deleted,omitempty"`
	Upserted *int `json:"upserted,omitempty"`
}

// Record The object contains information about an index record.
type Record struct {
	// Id the record identifier within the index. The value must be unique for the index and it is defined by the format parser.
	Id *string `json:"id,omitempty"`

	// Segment contains the searchable text for the record.
	Segment *string `json:"segment,omitempty"`

	// Vector contains the vector data for the record in the format basis. The format parser defines the basis and the field structure.
	Vector *openapi_types.File `json:"vector,omitempty"`
}

// RecordsResult defines model for RecordsResult.
type RecordsResult struct {
	NextPageId *string   `json:"nextPageId,omitempty"`
	Records    *[]Record `json:"records,omitempty"`
	Total      *int      `json:"total,omitempty"`
}

// SearchRecordsRecords defines model for SearchRecordsRecords.
type SearchRecordsRecords struct {
	Distinct     *bool                   `json:"distinct,omitempty"`
	IndexIDs     *[]string               `json:"indexIDs,omitempty"`
	Limit        *int                    `json:"limit,omitempty"`
	Offset       *int                    `json:"offset,omitempty"`
	OrderByScore *bool                   `json:"orderByScore,omitempty"`
	PageId       *string                 `json:"pageId,omitempty"`
	Tags         *map[string]interface{} `json:"tags,omitempty"`
	Text         *string                 `json:"text,omitempty"`
}

// CreatedAfter defines model for CreatedAfter.
type CreatedAfter = time.Time

// CreatedBefore defines model for CreatedBefore.
type CreatedBefore = time.Time

// FormatId defines model for FormatId.
type FormatId = string

// IndexId defines model for IndexId.
type IndexId = string

// Limit defines model for Limit.
type Limit = int

// PageId defines model for PageId.
type PageId = string

// StartIndexId defines model for StartIndexId.
type StartIndexId = string

// GetIndexesParams defines parameters for GetIndexes.
type GetIndexesParams struct {
	// CreatedAfter start of time interval in which items are queried
	CreatedAfter *CreatedAfter `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// CreatedBefore end of time interval in which items are queried
	CreatedBefore *CreatedBefore `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// StartIndexId The indexId for the first record
	StartIndexId *StartIndexId `form:"startIndexId,omitempty" json:"startIndexId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateIndexMultipartBody defines parameters for CreateIndex.
type CreateIndexMultipartBody struct {
	// File contains the binary data for the document of the specified format
	File *openapi_types.File `json:"file,omitempty"`

	// Meta The object describes a new index request.
	Meta *CreateIndexRequest `json:"meta,omitempty"`
}

// GetIndexRecordsParams defines parameters for GetIndexRecords.
type GetIndexRecordsParams struct {
	// PageId The pageId for the paging request
	PageId *PageId `form:"pageId,omitempty" json:"pageId,omitempty"`

	// Limit The limit defines the max number of objects returned per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateFormatJSONRequestBody defines body for CreateFormat for application/json ContentType.
type CreateFormatJSONRequestBody = Format

// CreateIndexJSONRequestBody defines body for CreateIndex for application/json ContentType.
type CreateIndexJSONRequestBody = CreateIndexRequest

// CreateIndexMultipartRequestBody defines body for CreateIndex for multipart/form-data ContentType.
type CreateIndexMultipartRequestBody CreateIndexMultipartBody

// PutIndexJSONRequestBody defines body for PutIndex for application/json ContentType.
type PutIndexJSONRequestBody = Index

// PatchIndexRecordsJSONRequestBody defines body for PatchIndexRecords for application/json ContentType.
type PatchIndexRecordsJSONRequestBody = PatchRecordsRequest

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody = SearchRecordsRecords

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retreive all known formats
	// (GET /formats)
	GetFormats(c *gin.Context)
	// Create new format
	// (POST /formats)
	CreateFormat(c *gin.Context)

	// (DELETE /formats/{formatId})
	DeleteFormat(c *gin.Context, formatId FormatId)

	// (GET /formats/{formatId})
	GetFormat(c *gin.Context, formatId FormatId)
	// Retreive indexes
	// (GET /indexes)
	GetIndexes(c *gin.Context, params GetIndexesParams)
	// Create new index
	// (POST /indexes)
	CreateIndex(c *gin.Context)

	// (DELETE /indexes/{indexId})
	DeleteIndex(c *gin.Context, indexId IndexId)

	// (GET /indexes/{indexId})
	GetIndex(c *gin.Context, indexId IndexId)

	// (PUT /indexes/{indexId})
	PutIndex(c *gin.Context, indexId IndexId)

	// (GET /indexes/{indexId}/records)
	GetIndexRecords(c *gin.Context, indexId IndexId, params GetIndexRecordsParams)

	// (PATCH /indexes/{indexId}/records)
	PatchIndexRecords(c *gin.Context, indexId IndexId)

	// (GET /ping)
	Ping(c *gin.Context)

	// (POST /search)
	Search(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetFormats operation middleware
func (siw *ServerInterfaceWrapper) GetFormats(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormats(c)
}

// CreateFormat operation middleware
func (siw *ServerInterfaceWrapper) CreateFormat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateFormat(c)
}

// DeleteFormat operation middleware
func (siw *ServerInterfaceWrapper) DeleteFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFormat(c, formatId)
}

// GetFormat operation middleware
func (siw *ServerInterfaceWrapper) GetFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "formatId" -------------
	var formatId FormatId

	err = runtime.BindStyledParameter("simple", false, "formatId", c.Param("formatId"), &formatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter formatId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFormat(c, formatId)
}

// GetIndexes operation middleware
func (siw *ServerInterfaceWrapper) GetIndexes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndexesParams

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAfter: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdBefore: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startIndexId" -------------

	err = runtime.BindQueryParameter("form", true, false, "startIndexId", c.Request.URL.Query(), &params.StartIndexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startIndexId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndexes(c, params)
}

// CreateIndex operation middleware
func (siw *ServerInterfaceWrapper) CreateIndex(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIndex(c)
}

// DeleteIndex operation middleware
func (siw *ServerInterfaceWrapper) DeleteIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIndex(c, indexId)
}

// GetIndex operation middleware
func (siw *ServerInterfaceWrapper) GetIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndex(c, indexId)
}

// PutIndex operation middleware
func (siw *ServerInterfaceWrapper) PutIndex(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutIndex(c, indexId)
}

// GetIndexRecords operation middleware
func (siw *ServerInterfaceWrapper) GetIndexRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIndexRecordsParams

	// ------------- Optional query parameter "pageId" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageId", c.Request.URL.Query(), &params.PageId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIndexRecords(c, indexId, params)
}

// PatchIndexRecords operation middleware
func (siw *ServerInterfaceWrapper) PatchIndexRecords(c *gin.Context) {

	var err error

	// ------------- Path parameter "indexId" -------------
	var indexId IndexId

	err = runtime.BindStyledParameter("simple", false, "indexId", c.Param("indexId"), &indexId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter indexId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchIndexRecords(c, indexId)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Ping(c)
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Search(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/formats", wrapper.GetFormats)
	router.POST(options.BaseURL+"/formats", wrapper.CreateFormat)
	router.DELETE(options.BaseURL+"/formats/:formatId", wrapper.DeleteFormat)
	router.GET(options.BaseURL+"/formats/:formatId", wrapper.GetFormat)
	router.GET(options.BaseURL+"/indexes", wrapper.GetIndexes)
	router.POST(options.BaseURL+"/indexes", wrapper.CreateIndex)
	router.DELETE(options.BaseURL+"/indexes/:indexId", wrapper.DeleteIndex)
	router.GET(options.BaseURL+"/indexes/:indexId", wrapper.GetIndex)
	router.PUT(options.BaseURL+"/indexes/:indexId", wrapper.PutIndex)
	router.GET(options.BaseURL+"/indexes/:indexId/records", wrapper.GetIndexRecords)
	router.PATCH(options.BaseURL+"/indexes/:indexId/records", wrapper.PatchIndexRecords)
	router.GET(options.BaseURL+"/ping", wrapper.Ping)
	router.POST(options.BaseURL+"/search", wrapper.Search)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//O/3GeEwlAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
