openapi: 3.0.3
info:
  title: 'Simila API'
  description: |
    Simila service API
  version: 1.0.0
paths:
  /formats:
    post:
      tags:
        - Formats
      summary: Create new format
      description: Create a new format if it doesn't exist yet.
      operationId: CreateFormat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Format'
      responses:
        201:
          description: The format was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Format'
        409:
          description: The format with the name already exists.
    get:
      tags:
        - Formats
      summary: List formats
      description: List formats.
      operationId: ListFormats
      responses:
        201:
          description: The format list retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Formats'
  /formats/{formatId}:
    get:
      tags:
        - Formats
      summary: Get format
      description: Get format.
      operationId: GetFormat
      parameters:
        - $ref: '#/components/parameters/FormatId'
      responses:
        200:
          description: The format was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Format'
        404:
          description: The format is not found.
    delete:
      tags:
        - Formats
      summary: Delete format
      description: Delete format. The format can be deleted if it is not used and not system defined.
      operationId: DeleteFormat
      parameters:
        - $ref: '#/components/parameters/FormatId'
      responses:
        204:
          description: The format was deleted successfully.
        403:
          description: The format could not be deleted since it is system defined.
        404:
          description: The format was not found.
        409:
          description: The format exists but cannot be deleted due to dependencies.
  /nodes:
    get:
      tags:
        - Nodes
      summary: List nodes
      description: List nodes.
      operationId: ListNodes
      parameters:
        - $ref: '#/components/parameters/PathFilter'
      responses:
        200:
          description: The nodes list retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesResult'
  /nodes/{path}:
    delete:
      tags:
        - Nodes
      summary: Delete node
      description: Delete node (and all children).
      operationId: DeleteNode
      parameters:
        - $ref: '#/components/parameters/Path'
      responses:
        204:
          description: The node was deleted successfully.
        404:
          description: The node was not found.
  /nodes/{path}/records:
    post:
      tags:
        - Records
      summary: Create node records
      description: Create node records. The call accepts two different content types - json and multiform data.
      operationId: CreateNodeRecords
      parameters:
        - $ref: '#/components/parameters/Path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecordsRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                meta:
                  $ref: '#/components/schemas/CreateRecordsRequest'
                file:
                  type: string
                  format: binary
                  description: The document binary data in the specified format.
      responses:
        201:
          description: The records were created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRecordsResult'
        409:
          description: The records were not created due to a conflict.
    get:
      tags:
        - Records
      summary: List node records
      description: List node records.
      operationId: ListNodeRecords
      parameters:
        - $ref: '#/components/parameters/Path'
        - $ref: '#/components/parameters/FormatFilter'
        - $ref: '#/components/parameters/CreatedAfterFilter'
        - $ref: '#/components/parameters/CreatedBeforeFilter'
        - $ref: '#/components/parameters/PageId'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: The list of records retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRecordsResult'
        404:
          description: The node was not found.
    patch:
      tags:
        - Records
      summary: Patch node records
      description: Patch node records.
      operationId: PatchNodeRecords
      parameters:
        - $ref: '#/components/parameters/Path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRecordsRequest'
      responses:
        200:
          description: The records were patched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchRecordsResult'
        404:
          description: The node was not found.
  /ping:
    get:
      tags:
        - Ping
      summary: Health check
      description: Health check, check if the API server is up and running.
      operationId: Ping
      responses:
        200:
          description: The ping was successful.
          content:
            application/json:
              schema:
                type: string
  /search:
    post:
      tags:
        - Search
      description: Search text across the index records.
      operationId: Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRecordsRequest'
      responses:
        200:
          description: The search was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRecordsResult'
components:
  schemas:
    Format:
      type: object
      description: The object describes a data format.
      required:
        - name
      properties:
        name:
          type: string
          description: The format name, it is used as the format identifier.
    Formats:
      type: object
      description: The object is used as a response of the formats list request.
      required:
        - formats
      properties:
        formats:
          type: array
          description: Contains a list of formats.
          items:
            $ref: '#/components/schemas/Format'
    Node:
      type: object
      description: The object describes the index node.
      required:
        - name
        - path
        - type
        - tags
      properties:
        name:
          type: string
          description: The node name, must be unique among the siblings in the tree.
        path:
          type: string
          description: The node path (identifier) within the index.
        type:
          $ref: '#/components/schemas/NodeType'
        tags:
          $ref: '#/components/schemas/Tags'
    NodeType:
      type: string
      description: The object describes the index node type.
      enum:
        - folder
        - document
    Tags:
      type: object
      description: The object describes the node tags.
      additionalProperties:
        type: string
    ListNodesResult:
      type: object
      description: The object is used as a response of the nodes list request.
      required:
        - items
      properties:
        items:
          type: array
          description: The list of nodes.
          items:
            $ref: '#/components/schemas/Node'
    Record:
      type: object
      description: The object contains information about the index record.
      required:
        - id
        - segment
        - vector
        - format
        - rankMultiplier
      properties:
        id:
          type: string
          description: The record identifier within the node.
        segment:
          type: string
          description: The searchable text for the record.
        vector:
          type: string
          description: The vector data for the segment.
          format: byte
        format:
          type: string
          description: The format of the record.
        rankMultiplier:
          type: number
          default: 1.0
          description: The priority coefficient (must be >= 1.0) of the record within a search result set.
    CreateRecordsRequest:
      type: object
      description: The object is used for records creation.
      required:
        - nodeType
        - tags
        - parser
        - document
        - records
        - rankMultiplier
      properties:
        nodeType:
          $ref: '#/components/schemas/NodeType'
        tags:
          $ref: '#/components/schemas/Tags'
        parser:
          type: string
          description: The parser name (format name) to be used for the document body.
        document:
          type: string
          description: The binary data for the document of the specified format.
          format: byte
        records:
          type: array
          description: The list of records that must be added to the node.
          items:
            $ref: '#/components/schemas/Record'
        rankMultiplier:
          type: number
          default: 1.0
          description: The priority coefficient (must be >= 1.0) of the records within a search result set, the value is overridden by the rankMultiplier value specified for an individual record.
    CreateRecordsResult:
      type: object
      description: The object is used as a response of the records creation request.
      required:
        - nodesCreated
        - recordsCreated
      properties:
        nodesCreated:
          type: array
          description: The list of nodes created.
          items:
            $ref: '#/components/schemas/Node'
        recordsCreated:
          type: integer
          description: The number of records created.
    PatchRecordsRequest:
      type: object
      description: The object is used to upsert and delete the node records.
      required:
        - upsertRecords
        - deleteRecords
      properties:
        upsertRecords:
          type: array
          description: The records to be upserted for the node.
          items:
            $ref: '#/components/schemas/Record'
        deleteRecords:
          type: array
          description: The records to be deleted for the node.
          items:
            $ref: '#/components/schemas/Record'
    PatchRecordsResult:
      type: object
      description: The object is used as a response to the patch records request.
      required:
        - upserted
        - deleted
      properties:
        upserted:
          type: integer
          description: The number of upserted records.
        deleted:
          type: integer
          description: The number of deleted records.
    ListRecordsResult:
      type: object
      description: The object is used a response to the list records request.
      required:
        - items
        - total
      properties:
        records:
          type: array
          description: The list of found records.
          items:
            $ref: '#/components/schemas/Record'
        nextPageId:
          type: string
          description: The id of the next page for getting the rest of the records.
        total:
          type: integer
          description: The total number of found records.
    SearchRecordsRequest:
      type: object
      description: The object is used to search text across all the index records.
      required:
        - text
        - tags
        - path
        - strict
        - offset
        - limit
      properties:
        text:
          type: string
          description: The text to be found in the records.
        tags:
          $ref: '#/components/schemas/Tags'
        path:
          type: string
          description: The node path where the text to be searched for, by default, this includes the node subtrees too.
        strict:
          type: boolean
          description: The strict flag limits the search scope strictly to the node located by the provided path, i.e. the node subtrees are not included.
        offset:
          type: integer
          description: The number of records to skip before start returning results.
        limit:
          type: integer
          description: The maximum number of records per page.
    SearchRecordsResult:
      type: object
      description: The object is used as a response to the search records request.
      required:
        - items
        - total
      properties:
        items:
          type: array
          description: The found index records.
          items:
            $ref: '#/components/schemas/SearchRecordsResultItem'
        total:
          type: integer
          description: The total number of found records.
    SearchRecordsResultItem:
      type: object
      description: The object is used as an item in the search records response.
      required:
        - path
        - record
        - matchedKeywords
        - score
      properties:
        path:
          type: string
          description: The path of the record.
        record:
          $ref: '#/components/schemas/Record'
        matchedKeywords:
          type: array
          description: The matched keywords within the record.
          items:
            type: string
        score:
          type: number
          format: float
          description: The relevancy score of the record.
  parameters:
    #
    # In path params
    #
    FormatId:
      in: path
      name: formatId
      description: The format identifier.
      required: true
      schema:
        type: string
    Path:
      in: path
      name: path
      description: The node path (identifier) within the index.
      required: true
      schema:
        type: string
    #
    # Query params
    #
    FormatFilter:
      in: query
      name: format
      description: The format specifies the format to filter the records by.
      required: false
      schema:
        type: string
    TagsFilter:
      in: query
      name: tags
      description: The tags specifies the tags to filter the records by.
      required: false
      schema:
        $ref: '#/components/schemas/Tags'
    PathFilter:
      in: query
      name: path
      description: The path specifies the path to filter by.
      required: false
      schema:
        type: string
    CreatedAfterFilter:
      in: query
      name: createdAfter
      description: The createdAfter specifies the lowest creation time (exclusive) the resulting records can have.
      required: false
      schema:
        type: string
        format: date-time
    CreatedBeforeFilter:
      in: query
      name: createdBefore
      description: The createdBefore specifies the greatest creation time (exclusive) the resulting records can have.
      required: false
      schema:
        type: string
        format: date-time
    Limit:
      in: query
      name: limit
      description: The limit defines the max number of objects returned per page.
      required: false
      schema:
        type: integer
    PageId:
      in: query
      name: pageId
      description: The pageId specifies from which page to start return results.
      required: false
      schema:
        type: string
