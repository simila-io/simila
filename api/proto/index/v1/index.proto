syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package index.v1;
option go_package = "./index/v1;index";

// Service provides an API for working with the index objects (nodes, records, etc)
service Service {
  // Create allows to create the new records for a search.
  rpc Create(CreateRecordsRequest) returns (CreateRecordsResult);
  // CreateWithStreamData allows to create new index records by streaming the records.
  rpc CreateWithStreamData(stream CreateIndexStreamRequest) returns (CreateRecordsResult);
  // UpdateNode allows to update Node data, e.g. tags.
  rpc UpdateNode(UpdateNodeRequest) returns (google.protobuf.Empty);
  // DeleteNode allows to delete nodes according to the request provided
  rpc DeleteNodes(DeleteNodesRequest) returns (google.protobuf.Empty);
  // ListNodes returns all known children for the Path provided
  rpc ListNodes(Path) returns (Nodes);
  // Patch allows to insert, update or delete an index's records
  rpc PatchRecords(PatchRecordsRequest) returns (PatchRecordsResult);
  // ListRecords returns list of records for a path associated with it
  rpc ListRecords(ListRequest) returns (ListRecordsResult);
  // Search runs the search across all the index records matching the query. Result will
  // be ordered by the ranks for the request.
  rpc Search(SearchRecordsRequest) returns (SearchRecordsResult);
}

// Path structure describes the list of nodes which identify a final node in the object tree.
message Path {
  // path is the nodes names separated by '/' like in the computer filesystem
  string path = 1;
}

enum NodeType {
  FOLDER = 0;
  DOCUMENT = 1;
}

message Node {
  // path to the node
  string path = 1;
  // name is the identifier of the node on the level of the tree. Name must be unique among the children of the same
  // node.
  string name = 2;
  // type of the node
  NodeType type = 3;
  // tags defines the tags associated with the object
  map<string, string> tags = 4;
}

message Nodes {
  repeated Node nodes = 1;
}

// CreateRecordsRequest is used for the creation of the new index records.
message CreateRecordsRequest {
  // path contains the path to a node the all records will be associated with. If one or several
  // nodes in the path do not exist, they will be created automatically with folder type.
  // path cannot contain "document" nodes in the middle, but last one.
  string path = 1;
  // nodeType contains the node type the records will be added to if it will be created during the call.
  // This is the last name in the path and if it doesn't exist, it will be created with the type
  optional NodeType nodeType = 2;
  // tags associated with the new node. If it is empty, no changes in the tags for the node.
  map<string, string> tags = 3;
  // parser, which will be used for the document body. Actually it is the format name
  optional string parser = 4;
  // document contains the binary data for the parser provided. It may be empty
  optional bytes document = 5;
  // records contains the list of records that can be added additionally to the document
  repeated Record records = 6;
  // rankMultiplier must be >= 1.0 and defines the priority of the records if the parser is used or no this field in the records list
  float rankMultiplier = 7;
}

// CreateIndexStreamRequest wraps CreateIndexRequest OR a chunk of body stream
message CreateIndexStreamRequest {
  // CreateRecordsRequest must be in the first packet of the gRPC stream
  CreateRecordsRequest meta = 1;
  // data is the body data, may start from the first packet of the stream
  bytes data = 2;
}

// CreateRecordsResult describes the result of the Create call
message CreateRecordsResult {
  Nodes nodesCreated = 1;
  int64 recordsCreated = 2;
}

// Record represents the index record
message Record {
  // id of the record within the node. This value is created by parser or during the records insertion.
  // it is used for the updating records or deleting them within a node
  string id = 1;
  // segment contains the searchable text for the record
  string segment = 2;
  // vector is the list of the byte values (stringified) ordered according the basis fields definition
  bytes vector = 3;
  // format of the record
  string format = 4;
  // rankMultiplier must be >= 1.0 and defines the priority of the records if the parser is used or no this field in the records list
  float rankMultiplier = 5;
}

// ListRequest describes input parameters for the list operation
message ListRequest {
  // path to the node, for which records to be listed
  string path = 1;
  // format contains filter for specific records format
  optional string format = 2;
  optional string pageId = 3;
  optional google.protobuf.Timestamp createdAfter = 4;
  optional google.protobuf.Timestamp createdBefore = 5;
  optional int64 limit = 6;
}

message ListRecordsResult {
  repeated Record records = 1;
  optional string nextPageId = 2;
  int64 total = 3;
}

// PatchRecordsRequest describes input parameters for index records patch operation.
message PatchRecordsRequest {
  // path is the path to the node for the patch request
  string path = 1;
  // upsertRecords contains the list of records that should be inserted or updated
  repeated Record upsertRecords = 2;
  // deleteRecords contains the list of records that should be deleted
  repeated Record deleteRecords = 3;
}

// PatchRecordsResult describes the result of the patch index's records operation
message PatchRecordsResult {
  int64 upserted = 1;
  int64 deleted = 2;
}

// SearchRecordsRequest describes input parameters for the Search over indexes operation.
message SearchRecordsRequest {
  string textQuery = 1;
  string filterConditions = 2;
  //The flag turns off results grouping by path.
  optional bool groupByPathOff = 3;
  optional int64 offset = 4;
  // limit specifies the maximum number of records in the result set
  optional int64 limit = 5;
}

// SearchRecordsResultItem describes search records result item
message SearchRecordsResultItem {
  string path = 1;
  Record record = 2;
  repeated string matchedKeywords = 3;
  optional float score = 4;
}

// SearchRecordsResult contains the result of a search operation
message SearchRecordsResult {
  repeated SearchRecordsResultItem items = 1;
  int64 total = 2;
}

// UpdateNodeRequest describes input parameters for the node update operation
message UpdateNodeRequest {
  // path is the fqnp path to the node
  string path = 1;
  // node is the node data to be updated
  Node node = 2;
}

// DelecteNodesRequest is used for deleting multiple nodes and their records
message DeleteNodesRequest {
  // filterConditions is used to select nodes. It cannot be empty
  string filterConditions = 1;
  // force flag defines that children for a selected node maybe returned even if they
  // don't meet the filter conditions.
  optional bool force = 2;
}
